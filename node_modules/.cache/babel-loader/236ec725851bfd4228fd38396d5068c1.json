{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nexport function useTicTacToe() {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [displayTurn, setDisplayTurn] = useState(null);\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  function getWinner(board) {\n    for (let i = 0; i < lines.length; i++) {\n      const [v1, v2, v3] = lines[i].map(n => board[n] && board[n] % 2);\n\n      if (v1 !== null && v1 === v2 && v1 === v3) {\n        return v1;\n      }\n    }\n\n    return null;\n  }\n\n  useEffect(() => {\n    setWinner(getWinner(board));\n  }, [board]);\n\n  function showTurn(turnNb) {\n    if (turnNb => 0 && turnNb < turn) {\n      setDisplayTurn(turnNb);\n    } else {\n      setDisplayTurn(null);\n    }\n  }\n\n  function reset() {\n    setBoard(null);\n    setTurn(0);\n    setDisplayTurn(0);\n  }\n\n  const play = i => {\n    /*\r\n            const boardCopy = [...board];\r\n            boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n            setBoard(boardCopy);\r\n    */\n    const boardCopy = [...board];\n    boardCopy[i] = turn;\n    setBoard(boardCopy);\n    setTurn(turn + 1); //setBoard(board);\n\n    /*\r\n    // If click an square or if game win, return\r\n    if (winner || boardCopy[i]) return;\r\n    // Put an X or an O in the clicked square\r\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    setXisNext(!xIsNext);\r\n    */\n  };\n\n  return {\n    turn: turn,\n    board: displayTurn === null ? board : board.map(v => v < displayTurn ? v : null),\n    winner: winner,\n    disabled: turn === 9 || winner !== null || displayTurn !== null,\n    showTurn,\n    reset,\n    play\n  };\n}\n\n_s(useTicTacToe, \"tCTy+GoJXPJvfXDFd8HeTqH4uGc=\");\n\nexport default useTicTacToe;","map":{"version":3,"sources":["R:/UNI/React/create-react-app/tictactoer/src/components/hooks/useTicTacToe.js"],"names":["React","useState","useEffect","useTicTacToe","turn","setTurn","board","setBoard","Array","fill","winner","setWinner","displayTurn","setDisplayTurn","lines","getWinner","i","length","v1","v2","v3","map","n","showTurn","turnNb","reset","play","boardCopy","v","disabled"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nexport function useTicTacToe()\r\n{\r\n    const[turn, setTurn]= useState(0);\r\n    const [board, setBoard] = useState(Array(9).fill(null));\r\n    const [winner, setWinner]=useState(null); \r\n    const [displayTurn , setDisplayTurn]=useState(null);\r\n    \r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n  ];\r\nfunction getWinner(board) {\r\nfor (let i=0; i<lines.length; i++) {\r\n  const [v1, v2, v3] = lines[i].map(n => board[n] && board[n]%2);\r\n  if (v1!==null && v1 === v2 && v1 === v3) {\r\n    return v1;\r\n  }\r\n}\r\nreturn null;\r\n}\r\n\r\nuseEffect(() => {\r\n  setWinner(getWinner(board));\r\n    }, [board]\r\n    );\r\n\r\n\r\n\r\nfunction showTurn(turnNb)\r\n{\r\n  if(turnNb =>0 && turnNb<turn)\r\n  {\r\n    setDisplayTurn(turnNb)\r\n  }\r\n  else\r\n  {\r\n    setDisplayTurn(null);\r\n  }\r\n  \r\n}\r\nfunction reset() {\r\n  setBoard(null);\r\n  setTurn(0);\r\n  setDisplayTurn(0);\r\n}\r\n\r\n    const play = (i) => {\r\n        /*\r\n                const boardCopy = [...board];\r\n                boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n                setBoard(boardCopy);\r\n        */\r\n                const boardCopy = [...board];\r\n                boardCopy[i] = turn;\r\n                setBoard(boardCopy);\r\n                setTurn(turn + 1);\r\n        \r\n                //setBoard(board);\r\n                /*\r\n                // If click an square or if game win, return\r\n                if (winner || boardCopy[i]) return;\r\n                // Put an X or an O in the clicked square\r\n                boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n                setBoard(boardCopy);\r\n                setXisNext(!xIsNext);\r\n                */\r\n            };\r\n    return({\r\n        turn: turn, \r\n        board:displayTurn === null ? board : board.map((v)=> v<displayTurn ? v : null), \r\n        winner: winner,\r\n        disabled: (turn===9 || winner !== null || displayTurn !== null),\r\n        showTurn,\r\n        reset,\r\n        play\r\n    });\r\n}\r\n\r\nexport default useTicTacToe;"]},"metadata":{},"sourceType":"module"}